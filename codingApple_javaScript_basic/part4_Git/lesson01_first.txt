git 설치하기

- vs code 를 설치해야뎀
vs code 설치할때 :
(체크) code을 지원되는 파일 형식에 대한 편집기로 등록합니다.
(체크) PATH에 추가(다시 시작한 후 사용 가능)

윈도우는 설치시 하단 2개 체크가 잘 되어있어야 나중에 git 사용할 때 편리해집니다.




- 아무 작업폴더에서 터미널을 오픈합니다. 

작업폴더에다가
윈도우는 shift + 우클릭하면 powershell 열기
그걸 누르면 터미널이 오픈됩니다.



거기서 git --version 이라고 입력해봅시다. 
버전이 아무거나 뜨면 git 설치성공입니다.
안뜨면 에디터나 컴퓨터 재시작해봅시다. 


5. git 유저 이름셋팅

git config --global user.email "홍길동@naver.com"
git config --global user.name "홍길동"
컴퓨터에서 git을 처음 사용한다면 위 코드를 터미널에 차례로 입력하면 되는데 

누가 지금 git을 쓰고있는지 구분하기 위한 간단한 아이디 등록같은겁니다.




이제 기본적인 명령어를 알아봅시다.


1. git init

일단 작업폴더에서 git을 이용하고 싶으면
거기서 터미널을 열어서 git init 부터 입력하고 시작하면 됩니다. 
이제 git이 여러분이 파일생성하는거, 코드작성하는걸 추적하기 시작합니다. 

오늘 짠 코드가 맘에 들어서 따로 기록을 해두고 싶은겁니다. 
 

2. git add .

그러면 아까 설치한 git을 이용해서
"이 파일 현재상태를 기록 좀 해줘~" 라고 부탁하면 되는데 

git add 파일명 
git commit -m '아무메세지'
차례로 터미널에 입력하면 됩니다. 

이러면 방금 파일의 내용을 몰래 어딘가에 기록해줍니다. 


- 오늘의 용어정리 : staging area & repository 

작업폴더 -> git add -> staging area -> git commit -> repository

여기서 가운데 부분을 staging area,
파일버전이 저장되는 곳을 repository (저장소) 라고 합니다. 

 
1. staging area는 commit을 하기 전에 commit할 파일들을 골라놓는 곳입니다.
그리고 staging area에 파일넣는 행위를 staging이라고 합니다. 
git add 명령어로 staging 할 수 있습니다.


2. repository는 commit된 파일의 버전들을 모아놓는 곳입니다.
repository의 실체를 구경하고 싶으면 작업폴더안에 숨겨져 있는 .git 폴더 열어보면 됩니다. 
아무튼 staging area & repository 2개는 자주 쓰는 용어니까 잘 외워둡시다.


- 다른 명령어들 

git add 파일명1 파일명2
이렇게 여러 파일을 동시에 스테이징할 수 있습니다.
 

git add .
작업폴더의 모든 파일을 전부 스테이징하고 싶으면 git add . 하면 됩니다.


git status
요즘 젊은이들은 인생이 힘들고 복잡할 때 "상태창!!"을 외치는데 
git도 마찬가지로 힘들고 복잡할 때 git status 입력하면 됩니다.  
지금 변경된 파일, 스테이징된 파일 이런걸 쭉 알려줍니다. 
지금 뭐 하는지 까먹었을 때도 자주 입력하게 됩니다. 


git restore --staged 파일명
"스테이징된 파일을 취소하고 싶으면" 하면 이거 입력하면 됩니다.
터미널에서 자주 알려주는 명령어라 외울 필요는 없습니다.
저기서 파일명 대신 점찍으면 어떻게 될까요


git commit -m '메세지'
commit 할 때 -m 뒤에 메세지 입력가능합니다. 

메세지에 코드에 무슨기능 추가했는지 이런거 적으면 됩니다. 
 

git log --all --oneline
git log --all --oneline --graph
commit 기록을 한 눈에 파악하고 싶으면 git log 명령어 입력하면 됩니다. 

--graph 옵션을 넣으면 그래프로 그려줍니다. 지금은 보잘것 없음 

다만 입력 후엔 Vim 에디터가 켜져서 j, k 키로 위아래 스크롤이 가능하고 q 키로 종료할 수 있습니다. 


 

Q. 얼마나 자주 commit 하는게 좋음?

A. ctrl + s 누르는 것 처럼 5초마다 습관적으로 할 이유는 없고 
간단한 기능을 하나 추가할 때 마다 commit 하면 됩니다. 

 
예를 들어 웹개발시 회원가입기능을 만든다고 하면 

- 회원가입 폼 레이아웃을 만들면 commit 하고 

- 입력한 이메일이 맞는지 검증하는 기능을 만들었으면 commit 하고 

- 서버에 전송하는 기능을 만들었으면 commit 하고 

대충 이렇게 작은 작업하나 마쳤으면 commit 하는게 좋습니다. 

물론 3개 다 만들하고 commit 하는 사람들도 있습니다. 본인 맘임  

 

오늘의 숙제 :

파일 만들거나 파일내용 수정하면서 commit 5번 해보십시오 

 

"천재 해커처럼 중간중간 git status, git log 이런 명령어도 입력해봅시다. "

안해오면 다음수업 못 듣습니다.

5번째 커밋을 하기위해 적은 텍스트~~~
